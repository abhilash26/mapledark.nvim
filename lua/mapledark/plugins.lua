-- Plugin-specific highlight groups for Maple Dark theme
-- Modular and cacheable plugin highlights

local M = {}
local utils = require('mapledark.utils')
local hl = utils.hl

-- Individual plugin loaders (can be called on-demand)
M.loaders = {}

-- Blink.cmp completion plugin
M.loaders.blinkcmp = function(c)
  hl('BlinkCmpMenu', { fg = c.fg, bg = c.bg_light })
  hl('BlinkCmpMenuBorder', { fg = c.border, bg = c.bg_light })
  hl('BlinkCmpMenuSelection', { fg = c.bg, bg = c.blue, bold = true })
  hl('BlinkCmpDoc', { fg = c.fg, bg = c.bg_light })
  hl('BlinkCmpDocBorder', { fg = c.border, bg = c.bg_light })
  hl('BlinkCmpDocSeparator', { fg = c.border, bg = c.bg_light })
  hl('BlinkCmpSignatureHelp', { fg = c.fg, bg = c.bg_light })
  hl('BlinkCmpSignatureHelpBorder', { fg = c.border, bg = c.bg_light })
  hl('BlinkCmpSignatureHelpActiveParameter', { fg = c.yellow, bold = true })
  hl('BlinkCmpKind', { fg = c.cyan })
  hl('BlinkCmpKindText', { fg = c.fg })
  hl('BlinkCmpKindMethod', { fg = c.blue })
  hl('BlinkCmpKindFunction', { fg = c.blue })
  hl('BlinkCmpKindConstructor', { fg = c.cyan })
  hl('BlinkCmpKindField', { fg = c.red })
  hl('BlinkCmpKindVariable', { fg = c.fg })
  hl('BlinkCmpKindClass', { fg = c.yellow })
  hl('BlinkCmpKindInterface', { fg = c.yellow })
  hl('BlinkCmpKindModule', { fg = c.cyan })
  hl('BlinkCmpKindProperty', { fg = c.red })
  hl('BlinkCmpKindUnit', { fg = c.orange })
  hl('BlinkCmpKindValue', { fg = c.orange })
  hl('BlinkCmpKindEnum', { fg = c.yellow })
  hl('BlinkCmpKindKeyword', { fg = c.magenta })
  hl('BlinkCmpKindSnippet', { fg = c.green })
  hl('BlinkCmpKindColor', { fg = c.cyan })
  hl('BlinkCmpKindFile', { fg = c.blue })
  hl('BlinkCmpKindReference', { fg = c.cyan })
  hl('BlinkCmpKindFolder', { fg = c.blue })
  hl('BlinkCmpKindEnumMember', { fg = c.cyan })
  hl('BlinkCmpKindConstant', { fg = c.orange })
  hl('BlinkCmpKindStruct', { fg = c.yellow })
  hl('BlinkCmpKindEvent', { fg = c.magenta })
  hl('BlinkCmpKindOperator', { fg = c.fg })
  hl('BlinkCmpKindTypeParameter', { fg = c.yellow })
  hl('BlinkCmpLabel', { fg = c.fg })
  hl('BlinkCmpLabelDeprecated', { fg = c.fg_dark, strikethrough = true })
  hl('BlinkCmpLabelMatch', { fg = c.blue_br, bold = true })
  hl('BlinkCmpLabelDetail', { fg = c.fg_dark })
  hl('BlinkCmpLabelDescription', { fg = c.fg_dark, italic = true })
  hl('BlinkCmpSource', { fg = c.fg_dark, italic = true })
  hl('BlinkCmpScrollBarThumb', { fg = c.border })
  hl('BlinkCmpScrollBarGutter', { fg = c.bg })
end

-- Conform.nvim formatting plugin
M.loaders.conform = function(c)
  hl('ConformInfo', { fg = c.blue })
  hl('ConformSuccess', { fg = c.green, bold = true })
  hl('ConformError', { fg = c.red, bold = true })
  hl('ConformWarning', { fg = c.orange, bold = true })
end

-- Oil.nvim file explorer
M.loaders.oil = function(c)
  hl('OilDir', { fg = c.blue, bold = true })
  hl('OilDirIcon', { fg = c.blue })
  hl('OilLink', { fg = c.cyan, underline = true })
  hl('OilLinkTarget', { fg = c.cyan })
  hl('OilFile', { fg = c.fg })
  hl('OilFileHidden', { fg = c.fg_dark })
  hl('OilCreate', { fg = c.green, bold = true })
  hl('OilDelete', { fg = c.red, bold = true })
  hl('OilMove', { fg = c.orange, bold = true })
  hl('OilCopy', { fg = c.blue, bold = true })
  hl('OilChange', { fg = c.yellow, bold = true })
  hl('OilRestore', { fg = c.cyan, bold = true })
  hl('OilPurge', { fg = c.red, bold = true })
  hl('OilTrash', { fg = c.orange, bold = true })
  hl('OilSocket', { fg = c.magenta })
  hl('OilSize', { fg = c.cyan })
  hl('OilPermissionNone', { fg = c.fg_dark })
  hl('OilPermissionRead', { fg = c.yellow })
  hl('OilPermissionWrite', { fg = c.orange })
  hl('OilPermissionExecute', { fg = c.green })
  hl('OilTypeDir', { fg = c.blue })
  hl('OilTypeFifo', { fg = c.yellow })
  hl('OilTypeFile', { fg = c.fg })
  hl('OilTypeLink', { fg = c.cyan })
  hl('OilTypeSocket', { fg = c.magenta })
end

-- Fzf-lua fuzzy finder
M.loaders.fzflua = function(c)
  hl('FzfLuaNormal', { fg = c.fg, bg = c.bg_light })
  hl('FzfLuaBorder', { fg = c.border, bg = c.bg_light })
  hl('FzfLuaTitle', { fg = c.blue, bg = c.bg_light, bold = true })
  hl('FzfLuaPreviewNormal', { fg = c.fg, bg = c.bg })
  hl('FzfLuaPreviewBorder', { fg = c.border, bg = c.bg })
  hl('FzfLuaPreviewTitle', { fg = c.cyan, bg = c.bg, bold = true })
  hl('FzfLuaCursor', { fg = c.bg, bg = c.blue })
  hl('FzfLuaCursorLine', { bg = c.bg_sel })
  hl('FzfLuaCursorLineNr', { fg = c.blue, bg = c.bg_sel, bold = true })
  hl('FzfLuaSearch', { fg = c.bg, bg = c.yellow, bold = true })
  hl('FzfLuaScrollBorderEmpty', { fg = c.bg, bg = c.bg })
  hl('FzfLuaScrollBorderFull', { fg = c.border, bg = c.bg })
  hl('FzfLuaScrollFloatEmpty', { fg = c.bg, bg = c.bg })
  hl('FzfLuaScrollFloatFull', { fg = c.border, bg = c.bg })
  hl('FzfLuaHelpNormal', { fg = c.fg, bg = c.bg_light })
  hl('FzfLuaHelpBorder', { fg = c.border, bg = c.bg_light })
  hl('FzfLuaFilePart', { fg = c.fg })
  hl('FzfLuaPathColNr', { fg = c.fg_dark })
  hl('FzfLuaPathLineNr', { fg = c.cyan })
  hl('FzfLuaBufName', { fg = c.blue })
  hl('FzfLuaBufNr', { fg = c.orange })
  hl('FzfLuaBufLineNr', { fg = c.cyan })
  hl('FzfLuaBufFlagCur', { fg = c.green, bold = true })
  hl('FzfLuaBufFlagAlt', { fg = c.cyan })
  hl('FzfLuaTabTitle', { fg = c.blue, bold = true })
  hl('FzfLuaTabMarker', { fg = c.green, bold = true })
  hl('FzfLuaDirPart', { fg = c.blue })
  hl('FzfLuaDirIcon', { fg = c.blue })
  hl('FzfLuaFzfNormal', { fg = c.fg })
  hl('FzfLuaFzfCursorLine', { fg = c.bg, bg = c.blue, bold = true })
  hl('FzfLuaFzfMatch', { fg = c.blue_br, bold = true })
  hl('FzfLuaFzfBorder', { fg = c.border })
  hl('FzfLuaFzfScrollbar', { fg = c.border })
  hl('FzfLuaFzfSeparator', { fg = c.border })
  hl('FzfLuaFzfGutter', { fg = c.bg })
  hl('FzfLuaFzfHeader', { fg = c.cyan, bold = true })
  hl('FzfLuaFzfInfo', { fg = c.blue })
  hl('FzfLuaFzfPointer', { fg = c.magenta, bold = true })
  hl('FzfLuaFzfMarker', { fg = c.green, bold = true })
  hl('FzfLuaFzfSpinner', { fg = c.yellow })
  hl('FzfLuaFzfPrompt', { fg = c.magenta, bold = true })
  hl('FzfLuaHeaderBind', { fg = c.magenta })
  hl('FzfLuaHeaderText', { fg = c.cyan })
  hl('FzfLuaLiveSym', { fg = c.magenta, bold = true })
end

-- Lazy.nvim plugin manager
M.loaders.lazy = function(c)
  hl('LazyNormal', { fg = c.fg, bg = c.bg })
  hl('LazyProgressDone', { fg = c.green, bold = true })
  hl('LazyProgressTodo', { fg = c.fg_dark })
  hl('LazyButton', { fg = c.fg, bg = c.bg_light })
  hl('LazyButtonActive', { fg = c.bg, bg = c.blue, bold = true })
  hl('LazyH1', { fg = c.bg, bg = c.blue, bold = true })
  hl('LazyH2', { fg = c.blue, bold = true })
  hl('LazySpecial', { fg = c.cyan })
  hl('LazyCommit', { fg = c.green })
  hl('LazyCommitIssue', { fg = c.magenta })
  hl('LazyCommitType', { fg = c.yellow })
  hl('LazyCommitScope', { fg = c.cyan, italic = true })
  hl('LazyDimmed', { fg = c.fg_dark })
  hl('LazyProp', { fg = c.red })
  hl('LazyValue', { fg = c.green })
  hl('LazyNoCond', { fg = c.red })
  hl('LazyReasonPlugin', { fg = c.magenta })
  hl('LazyReasonRuntime', { fg = c.cyan })
  hl('LazyReasonCmd', { fg = c.yellow })
  hl('LazyReasonSource', { fg = c.blue })
  hl('LazyReasonEvent', { fg = c.green })
  hl('LazyReasonKeys', { fg = c.orange })
  hl('LazyReasonStart', { fg = c.green_br, bold = true })
  hl('LazyReasonFt', { fg = c.magenta })
  hl('LazyReasonImport', { fg = c.blue })
  hl('LazyDir', { fg = c.fg_dark })
  hl('LazyUrl', { fg = c.blue, underline = true })
  hl('LazyLocal', { fg = c.cyan })
  hl('LazyComment', { fg = c.fg_dark, italic = true })
  hl('LazyTaskOutput', { fg = c.fg })
  hl('LazyTaskError', { fg = c.red })
end

-- Mason.nvim LSP installer
M.loaders.mason = function(c)
  hl('MasonNormal', { fg = c.fg, bg = c.bg_light })
  hl('MasonHeader', { fg = c.bg, bg = c.blue, bold = true })
  hl('MasonHeaderSecondary', { fg = c.bg, bg = c.cyan, bold = true })
  hl('MasonHighlight', { fg = c.blue, bold = true })
  hl('MasonHighlightBlock', { fg = c.bg, bg = c.blue, bold = true })
  hl('MasonHighlightBlockBold', { fg = c.bg, bg = c.blue, bold = true })
  hl('MasonHighlightSecondary', { fg = c.cyan })
  hl('MasonHighlightBlockSecondary', { fg = c.bg, bg = c.cyan, bold = true })
  hl('MasonHighlightBlockBoldSecondary', { fg = c.bg, bg = c.cyan, bold = true })
  hl('MasonMuted', { fg = c.fg_dark, italic = true })
  hl('MasonMutedBlock', { fg = c.fg_dark, bg = c.bg })
  hl('MasonMutedBlockBold', { fg = c.fg_dark, bg = c.bg, bold = true })
  hl('MasonError', { fg = c.red, bold = true })
  hl('MasonWarning', { fg = c.orange, bold = true })
  hl('MasonHeading', { fg = c.blue, bold = true })
  hl('MasonInstalled', { fg = c.green, bold = true })
  hl('MasonPending', { fg = c.yellow })
  hl('MasonUninstalled', { fg = c.fg_dark })
  hl('MasonUninstalledBlock', { fg = c.fg_dark })
  hl('MasonAvailable', { fg = c.cyan })
  hl('MasonPackage', { fg = c.fg })
  hl('MasonPackageSelected', { fg = c.bg, bg = c.blue, bold = true })
  hl('MasonVersionLatest', { fg = c.green })
  hl('MasonVersionOutdated', { fg = c.orange, bold = true })
  hl('MasonLink', { fg = c.blue, underline = true })
  hl('MasonLinkSecondary', { fg = c.cyan, underline = true })
end

-- Telescope fuzzy finder (fallback)
M.loaders.telescope = function(c)
  hl('TelescopeBorder', { fg = c.border })
  hl('TelescopePromptBorder', { fg = c.border })
  hl('TelescopeResultsBorder', { fg = c.border })
  hl('TelescopePreviewBorder', { fg = c.border })
  hl('TelescopeSelection', { fg = c.bg, bg = c.blue, bold = true })
  hl('TelescopeSelectionCaret', { fg = c.magenta, bold = true })
  hl('TelescopeMultiSelection', { fg = c.green, bold = true })
  hl('TelescopeMatching', { fg = c.blue_br, bold = true })
  hl('TelescopePromptPrefix', { fg = c.magenta, bold = true })
  hl('TelescopeNormal', { fg = c.fg, bg = c.bg_light })
  hl('TelescopePromptNormal', { fg = c.fg, bg = c.bg_light })
  hl('TelescopeResultsNormal', { fg = c.fg, bg = c.bg_light })
  hl('TelescopePreviewNormal', { fg = c.fg, bg = c.bg })
  hl('TelescopeTitle', { fg = c.blue, bold = true })
  hl('TelescopePromptTitle', { fg = c.blue, bold = true })
  hl('TelescopeResultsTitle', { fg = c.cyan, bold = true })
  hl('TelescopePreviewTitle', { fg = c.green, bold = true })
end

-- Which-key key binding hints
M.loaders.whichkey = function(c)
  hl('WhichKey', { fg = c.magenta, bold = true })
  hl('WhichKeyGroup', { fg = c.blue })
  hl('WhichKeyDesc', { fg = c.fg })
  hl('WhichKeySeparator', { fg = c.fg_dark })
  hl('WhichKeyFloat', { fg = c.fg, bg = c.bg_light })
  hl('WhichKeyBorder', { fg = c.border, bg = c.bg_light })
  hl('WhichKeyValue', { fg = c.green })
end

-- Notify notification manager
M.loaders.notify = function(c)
  hl('NotifyERRORBorder', { fg = c.red, bg = c.bg_light })
  hl('NotifyWARNBorder', { fg = c.orange, bg = c.bg_light })
  hl('NotifyINFOBorder', { fg = c.blue, bg = c.bg_light })
  hl('NotifyDEBUGBorder', { fg = c.cyan, bg = c.bg_light })
  hl('NotifyTRACEBorder', { fg = c.magenta, bg = c.bg_light })
  hl('NotifyERRORIcon', { fg = c.red, bold = true })
  hl('NotifyWARNIcon', { fg = c.orange, bold = true })
  hl('NotifyINFOIcon', { fg = c.blue, bold = true })
  hl('NotifyDEBUGIcon', { fg = c.cyan, bold = true })
  hl('NotifyTRACEIcon', { fg = c.magenta, bold = true })
  hl('NotifyERRORTitle', { fg = c.red, bold = true })
  hl('NotifyWARNTitle', { fg = c.orange, bold = true })
  hl('NotifyINFOTitle', { fg = c.blue, bold = true })
  hl('NotifyDEBUGTitle', { fg = c.cyan, bold = true })
  hl('NotifyTRACETitle', { fg = c.magenta, bold = true })
end

-- Mini.nvim suite
M.loaders.mini = function(c)
  hl('MiniIndentscopeSymbol', { fg = c.magenta })
  hl('MiniIndentscopeSymbolOff', { fg = c.fg_dark })
  hl('MiniJump', { fg = c.bg, bg = c.magenta, bold = true })
  hl('MiniJump2dSpot', { fg = c.magenta, bold = true, underline = true })
  hl('MiniStarterCurrent', { fg = c.fg, bold = true })
  hl('MiniStarterFooter', { fg = c.cyan, italic = true })
  hl('MiniStarterHeader', { fg = c.blue, bold = true })
  hl('MiniStarterInactive', { fg = c.fg_dark })
  hl('MiniStarterItem', { fg = c.fg })
  hl('MiniStarterItemBullet', { fg = c.border })
  hl('MiniStarterItemPrefix', { fg = c.yellow })
  hl('MiniStarterSection', { fg = c.magenta, bold = true })
  hl('MiniStarterQuery', { fg = c.cyan })
end

-- Noice.nvim UI replacement
M.loaders.noice = function(c)
  hl('NoiceCmdline', { fg = c.fg, bg = c.bg_light })
  hl('NoiceCmdlineIcon', { fg = c.blue, bg = c.bg_light })
  hl('NoiceCmdlinePrompt', { fg = c.magenta, bg = c.bg_light, bold = true })
  hl('NoiceCmdlinePopup', { fg = c.fg, bg = c.bg_light })
  hl('NoiceCmdlinePopupBorder', { fg = c.border, bg = c.bg_light })
  hl('NoiceConfirm', { fg = c.fg, bg = c.bg_light })
  hl('NoiceConfirmBorder', { fg = c.green, bg = c.bg_light })
end

-- Main setup function - loads all or selected plugins
function M.setup(c, plugins, plugins_loaded)
  -- If specific plugins list provided, only load those
  if plugins and type(plugins) == 'table' then
    for _, plugin in ipairs(plugins) do
      if M.loaders[plugin] and not plugins_loaded[plugin] then
        M.loaders[plugin](c)
        plugins_loaded[plugin] = true
      end
    end
  else
    -- Load all plugins by default (existing behavior)
    for plugin, loader in pairs(M.loaders) do
      if not plugins_loaded[plugin] then
        loader(c)
        plugins_loaded[plugin] = true
      end
    end
  end
end

return M
